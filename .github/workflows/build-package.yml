name: Build and Package

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v25.07.16)
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools-scm
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run type checking
      run: |
        mypy src/ || true        

    - name: Run linting
      run: |
        ruff check .
        ruff format --check .
    
    - name: Run tests
      run: |
        pytest -v --tb=short
    
    - name: Run tests with coverage
      run: |
        coverage run -m pytest
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write  # Required for OIDC/Trusted Publishing
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools-scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools-scm
    
    - name: Get version from git tags
      id: version
      run: |
        # Get version from setuptools-scm
        VERSION=$(python -m setuptools_scm)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        pip install twine
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ steps.version.outputs.version }}
        path: dist/
    
    - name: Upload to PyPI (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@release/v1
      # For Trusted Publishing (recommended):
      # No 'with' block needed - uses OIDC automatically
      # 
      # For API Token (uncomment below):
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    

  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: python-package-*
        path: dist/
        merge-multiple: true
    
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
        generateReleaseNotes: true